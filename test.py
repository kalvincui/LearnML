# -*- coding: utf-8 -*-
"""test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sJfy2teclc-o0aC_BXdBtrvOBl0J6f0l
"""

import math
import pandas_datareader as web
import numpy as np
import pandas as pd
import yfinance as yf
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM 
from datetime import timedelta, date
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

import yfinance as yf
sp500 = yf.Ticker ("^GSPC")
sp500 = sp500.history(period="max")

del sp500["Dividends"]
del sp500["Stock Splits"]

sp500["Tomorrow"] = sp500 ["Close"].shift(-1)
sp500["Target"] = (sp500["Tomorrow"]>sp500["Close"]).astype(int)
sp500 = sp500.loc[date.today() - timedelta(days=365):].copy()

from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier(n_estimators=1000,min_samples_split=2,random_state=1)
train = sp500.iloc[:-100]
test = sp500.iloc[-100:]

predictors = ["Close", "Volume", "Open", "High", "Low"]
model.fit(train[predictors], train["Target"])

from sklearn.metrics import precision_score
preds = model.predict(test[predictors])
preds = pd.Series (preds, index=test.index)
preds

precision_score(test["Target"], preds)

combined = pd.concat([test["Target"], preds], axis=1)
combined.plot()

def predict (train, test, predictors, model):
  model.fit(train[predictors], train["Target"])
  preds = model.predict(test[predictors])
  preds = pd.Series(preds, index=test.index, name = "Predictions")
  combined = pd.concat([test["Target"], preds], axis=1)
  return combined

def backtest (data, model, predictors, start=100, step = 10):
  all_predictions = []
  for i in range (start, data.shape[0], step):
    train=data.iloc[0:i].copy()
    test=data.iloc[i:(i+step)].copy()
    predictions = predict(train, test, predictors, model)
    all_predictions.append(predictions)
  return pd.concat(all_predictions)

predictions = backtest (sp500, model, predictors)

predictions["Predictions"].value_counts()
precision_score(predictions["Target"], predictions["Predictions"])

predictions["Target"].value_counts() / predictions.shape[0]